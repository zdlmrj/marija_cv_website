{"ast":null,"code":"/*!\n * FilePondPluginImageResize 2.0.10\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */\n\n/* eslint-disable */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.FilePondPluginImageResize = factory());\n})(this, function () {\n  'use strict';\n\n  // test if file is of type image\n  var isImage = function isImage(file) {\n    return /^image/.test(file.type);\n  };\n  var getImageSize = function getImageSize(url, cb) {\n    var image = new Image();\n    image.onload = function () {\n      var width = image.naturalWidth;\n      var height = image.naturalHeight;\n      image = null;\n      cb({\n        width: width,\n        height: height\n      });\n    };\n    image.onerror = function () {\n      return cb(null);\n    };\n    image.src = url;\n  };\n\n  /**\n   * Image Auto Resize Plugin\n   */\n  var plugin = function plugin(_ref) {\n    var addFilter = _ref.addFilter,\n      utils = _ref.utils;\n    var Type = utils.Type;\n\n    // subscribe to file load and append required transformations\n    addFilter('DID_LOAD_ITEM', function (item, _ref2) {\n      var query = _ref2.query;\n      return new Promise(function (resolve, reject) {\n        // get file reference\n        var file = item.file;\n\n        // if this is not an image we do not have any business cropping it\n        if (!isImage(file) || !query('GET_ALLOW_IMAGE_RESIZE')) {\n          // continue with the unaltered dataset\n          return resolve(item);\n        }\n        var mode = query('GET_IMAGE_RESIZE_MODE');\n        var width = query('GET_IMAGE_RESIZE_TARGET_WIDTH');\n        var height = query('GET_IMAGE_RESIZE_TARGET_HEIGHT');\n        var upscale = query('GET_IMAGE_RESIZE_UPSCALE');\n\n        // no resizing to be done\n        if (width === null && height === null) return resolve(item);\n        var targetWidth = width === null ? height : width;\n        var targetHeight = height === null ? targetWidth : height;\n\n        // if should not upscale, we need to determine the size of the file\n        var fileURL = URL.createObjectURL(file);\n        getImageSize(fileURL, function (size) {\n          URL.revokeObjectURL(fileURL);\n\n          // something went wrong\n          if (!size) return resolve(item);\n          var imageWidth = size.width,\n            imageHeight = size.height;\n\n          // get exif orientation\n          var orientation = (item.getMetadata('exif') || {}).orientation || -1;\n\n          // swap width and height if orientation needs correcting\n          if (orientation >= 5 && orientation <= 8) {\n            var _ref3 = [imageHeight, imageWidth];\n            imageWidth = _ref3[0];\n            imageHeight = _ref3[1];\n          }\n\n          // image is already perfect size, no transformations required\n          if (imageWidth === targetWidth && imageHeight === targetHeight) return resolve(item);\n\n          // already contained?\n          // can't upscale image, so if already at correct scale, exit\n          if (!upscale) {\n            // covering target size\n            if (mode === 'cover') {\n              // if one of edges is smaller than target size, exit\n              if (imageWidth <= targetWidth || imageHeight <= targetHeight) return resolve(item);\n            }\n\n            // not covering target size, if image is contained in target size, exit\n            else if (imageWidth <= targetWidth && imageHeight <= targetWidth) {\n              return resolve(item);\n            }\n          }\n\n          // the image needs to be resized\n          item.setMetadata('resize', {\n            mode: mode,\n            upscale: upscale,\n            size: {\n              width: targetWidth,\n              height: targetHeight\n            }\n          });\n          resolve(item);\n        });\n      });\n    });\n\n    // Expose plugin options\n    return {\n      options: {\n        // Enable or disable image resizing\n        allowImageResize: [true, Type.BOOLEAN],\n        // the method of rescaling\n        // - force => force set size\n        // - cover => pick biggest dimension\n        // - contain => pick smaller dimension\n        imageResizeMode: ['cover', Type.STRING],\n        // set to false to disable upscaling of image smaller than the target width / height\n        imageResizeUpscale: [true, Type.BOOLEAN],\n        // target width\n        imageResizeTargetWidth: [null, Type.INT],\n        // target height\n        imageResizeTargetHeight: [null, Type.INT]\n      }\n    };\n  };\n\n  // fire pluginloaded event if running in browser, this allows registering the plugin when using async script tags\n  var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\n  if (isBrowser) {\n    document.dispatchEvent(new CustomEvent('FilePond:pluginloaded', {\n      detail: plugin\n    }));\n  }\n  return plugin;\n});","map":{"version":3,"names":["global","factory","exports","module","define","amd","self","FilePondPluginImageResize","isImage","file","test","type","getImageSize","url","cb","image","Image","onload","width","naturalWidth","height","naturalHeight","onerror","src","plugin","_ref","addFilter","utils","Type","item","_ref2","query","Promise","resolve","reject","mode","upscale","targetWidth","targetHeight","fileURL","URL","createObjectURL","size","revokeObjectURL","imageWidth","imageHeight","orientation","getMetadata","_ref3","setMetadata","options","allowImageResize","BOOLEAN","imageResizeMode","STRING","imageResizeUpscale","imageResizeTargetWidth","INT","imageResizeTargetHeight","isBrowser","window","document","dispatchEvent","CustomEvent","detail"],"sources":["/Users/marija/Documents/GitHub/marija_cv_website/node_modules/filepond-plugin-image-resize/dist/filepond-plugin-image-resize.js"],"sourcesContent":["/*!\n * FilePondPluginImageResize 2.0.10\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */\n\n/* eslint-disable */\n\n(function(global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined'\n        ? (module.exports = factory())\n        : typeof define === 'function' && define.amd\n        ? define(factory)\n        : ((global = global || self), (global.FilePondPluginImageResize = factory()));\n})(this, function() {\n    'use strict';\n\n    // test if file is of type image\n    var isImage = function isImage(file) {\n        return /^image/.test(file.type);\n    };\n\n    var getImageSize = function getImageSize(url, cb) {\n        var image = new Image();\n        image.onload = function() {\n            var width = image.naturalWidth;\n            var height = image.naturalHeight;\n            image = null;\n            cb({ width: width, height: height });\n        };\n        image.onerror = function() {\n            return cb(null);\n        };\n        image.src = url;\n    };\n\n    /**\n     * Image Auto Resize Plugin\n     */\n    var plugin = function plugin(_ref) {\n        var addFilter = _ref.addFilter,\n            utils = _ref.utils;\n        var Type = utils.Type;\n\n        // subscribe to file load and append required transformations\n        addFilter('DID_LOAD_ITEM', function(item, _ref2) {\n            var query = _ref2.query;\n            return new Promise(function(resolve, reject) {\n                // get file reference\n                var file = item.file;\n\n                // if this is not an image we do not have any business cropping it\n                if (!isImage(file) || !query('GET_ALLOW_IMAGE_RESIZE')) {\n                    // continue with the unaltered dataset\n                    return resolve(item);\n                }\n\n                var mode = query('GET_IMAGE_RESIZE_MODE');\n                var width = query('GET_IMAGE_RESIZE_TARGET_WIDTH');\n                var height = query('GET_IMAGE_RESIZE_TARGET_HEIGHT');\n                var upscale = query('GET_IMAGE_RESIZE_UPSCALE');\n\n                // no resizing to be done\n                if (width === null && height === null) return resolve(item);\n\n                var targetWidth = width === null ? height : width;\n                var targetHeight = height === null ? targetWidth : height;\n\n                // if should not upscale, we need to determine the size of the file\n                var fileURL = URL.createObjectURL(file);\n                getImageSize(fileURL, function(size) {\n                    URL.revokeObjectURL(fileURL);\n\n                    // something went wrong\n                    if (!size) return resolve(item);\n                    var imageWidth = size.width,\n                        imageHeight = size.height;\n\n                    // get exif orientation\n                    var orientation = (item.getMetadata('exif') || {}).orientation || -1;\n\n                    // swap width and height if orientation needs correcting\n                    if (orientation >= 5 && orientation <= 8) {\n                        var _ref3 = [imageHeight, imageWidth];\n                        imageWidth = _ref3[0];\n                        imageHeight = _ref3[1];\n                    }\n\n                    // image is already perfect size, no transformations required\n                    if (imageWidth === targetWidth && imageHeight === targetHeight)\n                        return resolve(item);\n\n                    // already contained?\n                    // can't upscale image, so if already at correct scale, exit\n                    if (!upscale) {\n                        // covering target size\n                        if (mode === 'cover') {\n                            // if one of edges is smaller than target size, exit\n                            if (imageWidth <= targetWidth || imageHeight <= targetHeight)\n                                return resolve(item);\n                        }\n\n                        // not covering target size, if image is contained in target size, exit\n                        else if (imageWidth <= targetWidth && imageHeight <= targetWidth) {\n                            return resolve(item);\n                        }\n                    }\n\n                    // the image needs to be resized\n                    item.setMetadata('resize', {\n                        mode: mode,\n                        upscale: upscale,\n                        size: {\n                            width: targetWidth,\n                            height: targetHeight,\n                        },\n                    });\n\n                    resolve(item);\n                });\n            });\n        });\n\n        // Expose plugin options\n        return {\n            options: {\n                // Enable or disable image resizing\n                allowImageResize: [true, Type.BOOLEAN],\n\n                // the method of rescaling\n                // - force => force set size\n                // - cover => pick biggest dimension\n                // - contain => pick smaller dimension\n                imageResizeMode: ['cover', Type.STRING],\n\n                // set to false to disable upscaling of image smaller than the target width / height\n                imageResizeUpscale: [true, Type.BOOLEAN],\n\n                // target width\n                imageResizeTargetWidth: [null, Type.INT],\n\n                // target height\n                imageResizeTargetHeight: [null, Type.INT],\n            },\n        };\n    };\n\n    // fire pluginloaded event if running in browser, this allows registering the plugin when using async script tags\n    var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\n    if (isBrowser) {\n        document.dispatchEvent(new CustomEvent('FilePond:pluginloaded', { detail: plugin }));\n    }\n\n    return plugin;\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}